diff --git a/frameworks/av/media/libstagefright/Android.mk b/frameworks/av/media/libstagefright/Android.mk
index 792c139ea..ed92008b4 100644
--- a/frameworks/av/media/libstagefright/Android.mk
+++ b/frameworks/av/media/libstagefright/Android.mk
@@ -212,6 +212,10 @@ LOCAL_C_INCLUDES += \
 	$(TOP)/hardware/samsung/exynos4/include
 endif
 
+ifeq ($(TARGET_BOARD_PLATFORM),hawaii)
+    LOCAL_CFLAGS += -DADD_LEGACY_ACQUIRE_BUFFER_SYMBOL
+endif
+
 LOCAL_MODULE:= libstagefright
 
 LOCAL_MODULE_TAGS := optional
diff --git a/frameworks/av/media/libstagefright/MediaBufferGroup.cpp b/frameworks/av/media/libstagefright/MediaBufferGroup.cpp
index 6ac6d4aa4..9e8c953a3 100644
--- a/frameworks/av/media/libstagefright/MediaBufferGroup.cpp
+++ b/frameworks/av/media/libstagefright/MediaBufferGroup.cpp
@@ -55,6 +55,13 @@ void MediaBufferGroup::add_buffer(MediaBuffer *buffer) {
     mLastBuffer = buffer;
 }
 
+#ifdef ADD_LEGACY_ACQUIRE_BUFFER_SYMBOL
+extern "C" status_t _ZN7android16MediaBufferGroup14acquire_bufferEPPNS_11MediaBufferE(
+    MediaBufferGroup* group, MediaBuffer **out) {
+    return group->acquire_buffer(out, false);
+}
+#endif
+
 status_t MediaBufferGroup::acquire_buffer(
         MediaBuffer **out, bool nonBlocking) {
     Mutex::Autolock autoLock(mLock);
diff --git a/frameworks/native/libs/binder/Parcel.cpp b/frameworks/native/libs/binder/Parcel.cpp
index 4690a8233..edd2146bf 100644
--- a/frameworks/native/libs/binder/Parcel.cpp
+++ b/frameworks/native/libs/binder/Parcel.cpp
@@ -895,6 +895,12 @@ status_t Parcel::writeString16(const String16& str)
     return writeString16(str.string(), str.size());
 }
 
+extern "C" status_t _ZN7android6Parcel13writeString16EPKDsj(void *parcel, const char16_t* str, size_t len);
+
+extern "C" status_t _ZN7android6Parcel13writeString16EPKtj(void *parcel, const char16_t* str, size_t len) {
+    return _ZN7android6Parcel13writeString16EPKDsj(parcel, str, len);
+}
+
 status_t Parcel::writeString16(const char16_t* str, size_t len)
 {
     if (str == NULL) return writeInt32(-1);
diff --git a/system/core/include/utils/RefBase.h b/system/core/include/utils/RefBase.h
index eac6a7840..b25bbce3d 100644
--- a/system/core/include/utils/RefBase.h
+++ b/system/core/include/utils/RefBase.h
@@ -53,6 +53,15 @@ inline bool operator _op_ (const U* o) const {                  \
 
 // ---------------------------------------------------------------------------
 
+#ifdef REFBASE_JB_MR1_COMPAT_SYMBOLS
+class ReferenceConverterBase {
+public:
+    virtual size_t getReferenceTypeSize() const = 0;
+    virtual void* getReferenceBase(void const*) const = 0;
+    inline virtual ~ReferenceConverterBase() { }
+};
+#endif
+
 class ReferenceRenamer {
 protected:
     // destructor is purposedly not virtual so we avoid code overhead from
diff --git a/system/core/include/utils/VectorImpl.h b/system/core/include/utils/VectorImpl.h
index 21ad71ce6..4defc35ea 100644
--- a/system/core/include/utils/VectorImpl.h
+++ b/system/core/include/utils/VectorImpl.h
@@ -105,6 +105,18 @@ protected:
     virtual void            do_splat(void* dest, const void* item, size_t num) const = 0;
     virtual void            do_move_forward(void* dest, const void* from, size_t num) const = 0;
     virtual void            do_move_backward(void* dest, const void* from, size_t num) const = 0;
+	
+#ifdef NEEDS_VECTORIMPL_SYMBOLS
+    // take care of FBC...
+    virtual void            reservedVectorImpl1();
+    virtual void            reservedVectorImpl2();
+    virtual void            reservedVectorImpl3();
+    virtual void            reservedVectorImpl4();
+    virtual void            reservedVectorImpl5();
+    virtual void            reservedVectorImpl6();
+    virtual void            reservedVectorImpl7();
+    virtual void            reservedVectorImpl8();
+#endif
     
 private:
         void* _grow(size_t where, size_t amount);
@@ -155,6 +167,18 @@ public:
         
 protected:
     virtual int             do_compare(const void* lhs, const void* rhs) const = 0;
+	
+#ifdef NEEDS_VECTORIMPL_SYMBOLS
+    // take care of FBC...
+    virtual void            reservedSortedVectorImpl1();
+    virtual void            reservedSortedVectorImpl2();
+    virtual void            reservedSortedVectorImpl3();
+    virtual void            reservedSortedVectorImpl4();
+    virtual void            reservedSortedVectorImpl5();
+    virtual void            reservedSortedVectorImpl6();
+    virtual void            reservedSortedVectorImpl7();
+    virtual void            reservedSortedVectorImpl8();
+#endif	
 
 private:
             ssize_t         _indexOrderOf(const void* item, size_t* order = 0) const;
diff --git a/system/core/libutils/Android.mk b/system/core/libutils/Android.mk
index 23a5c598f..88348aced 100644
--- a/system/core/libutils/Android.mk
+++ b/system/core/libutils/Android.mk
@@ -70,6 +70,9 @@ include $(BUILD_HOST_STATIC_LIBRARY)
 # =====================================================
 include $(CLEAR_VARS)
 
+ifeq ($(TARGET_BOARD_PLATFORM),hawaii)
+    LOCAL_CFLAGS += -DREFBASE_JB_MR1_COMPAT_SYMBOLS -DNEEDS_VECTORIMPL_SYMBOLS
+endif
 
 # we have the common sources, plus some device-specific stuff
 LOCAL_SRC_FILES:= \
diff --git a/system/core/libutils/RefBase.cpp b/system/core/libutils/RefBase.cpp
index 02907ad67..b0ca12e4d 100644
--- a/system/core/libutils/RefBase.cpp
+++ b/system/core/libutils/RefBase.cpp
@@ -630,6 +630,13 @@ void RefBase::onLastWeakRef(const void* /*id*/)
 
 // ---------------------------------------------------------------------------
 
+#ifdef REFBASE_JB_MR1_COMPAT_SYMBOLS
+extern "C" void _ZN7android7RefBase14moveReferencesEPvPKvjRKNS_22ReferenceConverterBaseE(void* /*dst*/, void const* /*src*/, size_t /*n*/,
+        const ReferenceConverterBase& /*caster*/)
+{
+}
+#endif
+
 #if DEBUG_REFS
 void RefBase::renameRefs(size_t n, const ReferenceRenamer& renamer) {
     for (size_t i=0 ; i<n ; i++) {
diff --git a/system/core/libutils/VectorImpl.cpp b/system/core/libutils/VectorImpl.cpp
index de65a6cba..ffd552b21 100644
--- a/system/core/libutils/VectorImpl.cpp
+++ b/system/core/libutils/VectorImpl.cpp
@@ -552,6 +552,17 @@ void VectorImpl::_do_move_backward(void* dest, const void* from, size_t num) con
     do_move_backward(dest, from, num);
 }
 
+#ifdef NEEDS_VECTORIMPL_SYMBOLS
+void VectorImpl::reservedVectorImpl1() { }
+void VectorImpl::reservedVectorImpl2() { }
+void VectorImpl::reservedVectorImpl3() { }
+void VectorImpl::reservedVectorImpl4() { }
+void VectorImpl::reservedVectorImpl5() { }
+void VectorImpl::reservedVectorImpl6() { }
+void VectorImpl::reservedVectorImpl7() { }
+void VectorImpl::reservedVectorImpl8() { }
+#endif
+
 /*****************************************************************************/
 
 SortedVectorImpl::SortedVectorImpl(size_t itemSize, uint32_t flags)
@@ -667,6 +678,17 @@ ssize_t SortedVectorImpl::remove(const void* item)
     return i;
 }
 
+#ifdef NEEDS_VECTORIMPL_SYMBOLS
+void SortedVectorImpl::reservedSortedVectorImpl1() { };
+void SortedVectorImpl::reservedSortedVectorImpl2() { };
+void SortedVectorImpl::reservedSortedVectorImpl3() { };
+void SortedVectorImpl::reservedSortedVectorImpl4() { };
+void SortedVectorImpl::reservedSortedVectorImpl5() { };
+void SortedVectorImpl::reservedSortedVectorImpl6() { };
+void SortedVectorImpl::reservedSortedVectorImpl7() { };
+void SortedVectorImpl::reservedSortedVectorImpl8() { };
+#endif
+
 /*****************************************************************************/
 
 }; // namespace android
